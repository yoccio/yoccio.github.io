<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>零</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yoccio.pw/"/>
  <updated>2017-01-25T05:31:31.000Z</updated>
  <id>http://blog.yoccio.pw/</id>
  
  <author>
    <name>Yucheng Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 学习笔记 - 零 - 安装及配置</title>
    <link href="http://blog.yoccio.pw/2017/01/25/Note-Progit-0/"/>
    <id>http://blog.yoccio.pw/2017/01/25/Note-Progit-0/</id>
    <published>2017-01-25T02:00:41.000Z</published>
    <updated>2017-01-25T05:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接触Git有一年多了，各种Git的教程看过几个版本，自己的项目现在大小也都托管到了Coding，这些经历告诉我Git会给我的学习工作都带来很大的便利。然而有时候在操作的时候总是有些问题，这对于一个已经成了我日常依赖的技能是很不方便的，而且呢，身边总有一些同学问我关于Git怎么用的问题。<br>所以我想啊，不如趁着年末静心不下来做其他工作的时候，重新整理一遍关于Git使用的各种问题，算是写给自己的一份笔记，也作为身边朋友咨询时的一份教程。<br><a id="more"></a></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>想要动手尝试Git，我们首先要安好Git，下面针对macOS、Windows 10和Linux（Ubuntu）三个平台进行进行介绍。  </p>
<h3 id="在Mac上安装"><a href="#在Mac上安装" class="headerlink" title="在Mac上安装"></a>在Mac上安装</h3><p>推荐使用brew安装，如果你不了解brew可以看下面的链接。  </p>
<blockquote>
<p><a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a>  </p>
</blockquote>
<p>brew安装git的方法，打开终端，键入：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure></p>
<p>Done！  </p>
<blockquote>
<p>如果你还需要一款图形化界面的管理工具，可以尝试SourceTree  </p>
</blockquote>
<h3 id="在Windows-10上安装"><a href="#在Windows-10上安装" class="headerlink" title="在Windows 10上安装"></a>在Windows 10上安装</h3><blockquote>
<p>其他版本的Windows下述方法部分适用，但可能出现笔者不可预知的问题。  </p>
</blockquote>
<h4 id="WSL（Windows-Subsystem-for-Linux）中使用Git"><a href="#WSL（Windows-Subsystem-for-Linux）中使用Git" class="headerlink" title="WSL（Windows Subsystem for Linux）中使用Git"></a>WSL（Windows Subsystem for Linux）中使用Git</h4><p>WSL在Windows 10 （1607）以后已经变得很成熟了，所以，不妨试试在WSL中使用git,当然。  </p>
<blockquote>
<p>WSL的内容已经超出了本文的主题，你如果有兴趣可以参考<a href="https://blogs.msdn.microsoft.com/wsl" target="_blank" rel="external">WSL Blog</a></p>
</blockquote>
<h4 id="使用git-bash"><a href="#使用git-bash" class="headerlink" title="使用git-bash"></a>使用git-bash</h4><p>你可以从<a href="https://git-for-windows.github.io/" target="_blank" rel="external">https://git-for-windows.github.io/</a> 获取安装包，安装完成后就可以使用命令行的git工具。  </p>
<h3 id="在Linux上安装"><a href="#在Linux上安装" class="headerlink" title="在Linux上安装"></a>在Linux上安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure>
<p>Done！  </p>
<h2 id="初次运行前的配置"><a href="#初次运行前的配置" class="headerlink" title="初次运行前的配置"></a>初次运行前的配置</h2><p>一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。</p>
<p>Git 提供了一个叫做 <code>git config</code> 的工具，专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>
<ul>
<li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。  </li>
<li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。  </li>
<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。  </li>
</ul>
<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git config --global user.name &quot;John Doe&quot;</div><div class="line">$ git config --global user.email johndoe@example.com</div></pre></td></tr></table></figure></p>
<p>如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，新的设定保存在当前项目的 <code>.git/config</code> 文件里。</p>
<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Vs Code ，可以重新设置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git config --global core.editor code</div></pre></td></tr></table></figure></p>
<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>你可以在<code>~/.gitconfig</code>中添加如下条目：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[alias]</div><div class="line">	lg = log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative</div><div class="line">  	co = checkout</div><div class="line">  	ci = commit</div><div class="line">  	st = status</div><div class="line">  	br = branch</div></pre></td></tr></table></figure></p>
<p>可以代替git原有的拼写，如果你觉得有必要这么做。以上的几条仅是例子，你也可以创建自己的缩写，git的相关命令介绍可以参考后面的介绍。  </p>
<blockquote>
<p>当然，你也可以在<code>~/.bash_profile</code>中创建你需要的缩写。</p>
</blockquote>
<h2 id="获得帮助"><a href="#获得帮助" class="headerlink" title="获得帮助"></a>获得帮助</h2><p>你可以键入如下三个命令之一获得帮助<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git help &lt;verb&gt;</div><div class="line">$ git &lt;verb&gt; --help</div><div class="line">$ man git-&lt;verb&gt;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>《GitPro》 1.5 Getting Started - Installing Git : <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="external">https://git-scm.com/book/en/v2/Getting-Started-Installing-Git</a>  </li>
<li><a href="http://iissnan.com/progit/" target="_blank" rel="external">http://iissnan.com/progit/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接触Git有一年多了，各种Git的教程看过几个版本，自己的项目现在大小也都托管到了Coding，这些经历告诉我Git会给我的学习工作都带来很大的便利。然而有时候在操作的时候总是有些问题，这对于一个已经成了我日常依赖的技能是很不方便的，而且呢，身边总有一些同学问我关于Git怎么用的问题。&lt;br&gt;所以我想啊，不如趁着年末静心不下来做其他工作的时候，重新整理一遍关于Git使用的各种问题，算是写给自己的一份笔记，也作为身边朋友咨询时的一份教程。&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://blog.yoccio.pw/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>世界 你好</title>
    <link href="http://blog.yoccio.pw/2017/01/24/hello-world/"/>
    <id>http://blog.yoccio.pw/2017/01/24/hello-world/</id>
    <published>2017-01-24T02:53:36.000Z</published>
    <updated>2017-01-25T05:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在经过两个月<del>学习</del>（拖延）和<del>修改</del>（拖延）后，我的博客终于算是能够上线了。<br><a id="more"></a></p>
<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><blockquote>
<p>既然是随笔一篇，标题便写作数字吧。  </p>
</blockquote>
<p>了解博客还是从去年（2016）开始，一门课程的老师在开课时执着的要求所有人写好每一周的个人博客作为工作学习记录（虽然，当时我就觉得这种要求对学生很不现实）。他推荐的是Cnblogs，讲道理内容是很不错的，但界面啊，真是伤眼睛，画风停留在不知多少年前，主题找不到一个能看的过去的，冗余功能倒是一大堆。所以，此博客当作文献参考来搜时是很好的，自己要写，还是应该找一个能够让人看着屏幕不生恶感的来入坑。<br>之后在看一篇介绍tensorflow文章的时候跳转到了别人用Github自建的博客，界面简洁精致的让我眼前一亮，这时我就觉得这就是我想要写的博客，一个尊重读者的博客就要有漂亮的界面。<br>但想建一个能自己控制的网站，听起来就不是件容易的事，尤其是对没有任何建站经验的人，但本着一个程序员不会先瞎搞的精神，Zhihu吧（感谢Zhihu）。  搜到的结果就是今天看到的Hexo，真是一个好东西（感谢<a href="http://hexo.io" target="_blank" rel="external">Hexo</a>项目）。  </p>
<h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><blockquote>
<p>准备更新一些建站的经历在这里，但我这么懒，可能要好久才会把坑填完。  </p>
</blockquote>
<h3 id="1-Github"><a href="#1-Github" class="headerlink" title="1 Github"></a>1 Github</h3><p>首先要准备一个GitHub账号，并建一个名字为<code>yourname.github.io</code>的仓库作为Page服务存放的地方。<br>怎么用Git和注册Github这件事已经有太多人写了太多重复的文章来介绍了，本着原创只创造新知识的精神（实际是懒得写）我就仅安利几个可以提供参考的网站：  </p>
<ol>
<li><a href="http://zhihu.com" target="_blank" rel="external">知乎</a>  </li>
<li><a href="http://jianshu.com" target="_blank" rel="external">简书</a></li>
</ol>
<h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2 Hexo"></a>2 Hexo</h3><p>首先介绍一下我的写作环境，一台Mac。当然，你要是Windows也应该是很方便可以用Hexo的（看别人的教程是这样的），不过有一些坑可能不一样。<br>Hexo官方给的介绍其实是有中文版的，不过既然说好了要介绍怎么搭，总不能全给个链接就算了，故我还是简单的写一些安装的建议吧。<br>安装依赖：  </p>
<ul>
<li>Xcode Command Line Tools</li>
<li>Node.js</li>
<li>Git</li>
</ul>
<p>第一个命令行工具如果你的电脑里没有，那你应该是新接触的Mac或者自己不写程序，官方说是要安一个Xcode之后再安装，不过我觉得如果你使用过HomeBrew，好像安一些必备的软件的时候就会自己把Command Line Tools安好。<br>假设你已经解决了第一个，那么我们来看第三个（为什么不是第二个呢？），Git这个东西Mac上是自带的，所以不用担心，但如果你的电脑里没有（鬼知道你怎么会弄没），你可以通过在终端里键入<code>$brew install git</code>安装（默认已经有了HomeBrew）。<br>现在来说第二个，这个应该是大多数用户需要做的唯一一件事：</p>
<ol>
<li>安装nvm<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</div></pre></td></tr></table></figure></li>
<li>重启终端 安装Node.js<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ nvm install stable</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这些做完之后，我们就可以愉快的安装Hexo了<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h3 id="3-Next"><a href="#3-Next" class="headerlink" title="3 Next"></a>3 Next</h3><p>Hexo里面有很多漂亮的主题，我选的事一款简单但集成度挺高的Next主题，下面就来介绍一下Next怎么用。 </p>
<p>未完待续。。。  </p>
<h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><blockquote>
<p>二没写完也是可以写三的。。。</p>
</blockquote>
<p>有了博客呢，就要好好的写，切实当作一个记录知识和问题的地方，欢迎看到的各位老师童鞋批评指正（呵呵呵，唯一被我折腾后保留的就是评论区了，没评论就尴尬了）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在经过两个月&lt;del&gt;学习&lt;/del&gt;（拖延）和&lt;del&gt;修改&lt;/del&gt;（拖延）后，我的博客终于算是能够上线了。&lt;br&gt;
    
    </summary>
    
    
      <category term="建站" scheme="http://blog.yoccio.pw/tags/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="随笔" scheme="http://blog.yoccio.pw/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
